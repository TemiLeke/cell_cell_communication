install.packages("Matrix")
install.packages("viridis")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("RColorBrewer")
install.packages("tictoc")
install.packages("Hmisc")
install.packages("corrplot")
install.packages("gridextra")
install.packages("igraph")
install.packages("ggrepel")
install.packages("grid")
install.packages('Seurat')
install.packages("tidyverse")
install.packages("cowplot")
install.packages("tidyverse")
install.packages("patchwork")
install.packages("enrichR")
# install BiocManager
install.packages("BiocManager")
# install Bioconductor core packages
BiocManager::install()
BiocManager::install("GeneOverlap")
BiocManager::install("WGCNA")
install.packages("harmony")
devtools::install_github('smorabit/hdWGCNA', ref='dev')
install.packages("devtools")
devtools::install_github('smorabit/hdWGCNA', ref='dev')
install.packages("tester")
devtools::install_github('smorabit/hdWGCNA', ref='dev')
BiocManager::install("GO.db")
BiocManager::install("AnnotationDbi")
BiocManager::install("SingleCellExperiment")
install.packages("qlcMatrix")
install.packages("MetBrewer")
BiocManager::install("UCell")
BiocManager::install("GSEABase")
BiocManager::install("GSVA")
install.packages("tidyverse")
packageVersion('Seurat')
packageVersion('tidyverse')
BiocManager::install("scDblFinder")
BiocManager::install("scater")
install.packages("ComplexUpset")
BiocManager::install("ComplexHeatmap")
install.packages("UpSetR")
install.packages("VennDiagram")
install.packages("reshape2")
install.packages("gridExtra")
install.packages("Signac")
install.packages("eulerr")
install.packages("lme4")
install.packages("lmerTest")
install.packages("glmmTMB")
install.packages("blme")
BiocManager::install("edgeR")
BiocManager::install("DESeq2")
BiocManager::install("limma")
BiocManager::install("pbmcapply")
install.packages("enhancedvolcano")
BiocManager::install("EnhancedVolcano")
BiocManager::install("circlicize")
install.packages("circlize")
devtools::install_github("shmohammadi86/SCINET")
devtools::install_github("netbiolab/scHumanNet")
devtools::install_github("shmohammadi86/ACTIONet", ref = "R-release")
packagesRequired=c("Biobase","qvalue","lfa","multtest","limma","biomaRt","GenomicFeatures","EnsDb.Hsapiens.v75","monocle","org.Hs.eg.db","DropletUtils","scran","AUCell", "RcisTarget","GENIE3","SCENIC","zoo", "mixtools", "rbokeh","DT", "NMF", "pheatmap", "R2HTML", "Rtsne","doMC", "doRNG","MAST","EnsDb.Mmusculus.v79","gskb","SC3",'PCAtools')
for(i in 1:length(packagesRequired)){
if((packagesRequired[i] %in% rownames(installed.packages())) == FALSE) {BiocManager::install(packagesRequired[i], update = FALSE,ask =FALSE)}
}
install.packages('BiocManager')
packagesRequired=c("ggbeeswarm","CrossClustering","parallel","colorRamps","ggplot2","PRROC","pROC","reshape","reshape2","Hmisc","patchwork","dplyr","ClusterR","hues","effsize","ggwordcloud")
if(("XML" %in% rownames(installed.packages())) == FALSE){
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
require(devtools)
install_version("XML", version = "3.98-1.17", repos = "http://cran.us.r-project.org")
}
for(i in 1:length(packagesRequired)){
if((packagesRequired[i] %in% rownames(installed.packages())) == FALSE) {install.packages(packagesRequired[i])}
}
install.packages("BiocManager")
install.packages("BiocManager")
ackagesRequired=c("Seurat","jackstraw","caret")
for(i in 1:length(packagesRequired)){
if((packagesRequired[i] %in% rownames(installed.packages())) == FALSE) {install.packages(packagesRequired[i])}
}
if(("SCENIC" %in% rownames(installed.packages())) == FALSE){
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
devtools::install_github("aertslab/SCENIC")
}
if(("harmony" %in% rownames(installed.packages())) == FALSE){
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
devtools::install_github("immunogenomics/harmony")
}
if(("ggraph" %in% rownames(installed.packages())) == FALSE){
install.packages("ggraph")
}
if(("ape" %in% rownames(installed.packages())) == FALSE){
install.packages("ape")
}
if(("seriation" %in% rownames(installed.packages())) == FALSE){
install.packages("seriation")
}
BiocManager::install("AnnotationDbi")
AnnotationDbi::genes?
AnnotationDbi::genes
ensembldb::genes
BiocManager::install("EnsDb.Hsapiens.v86")
install.packages('fs')
install.packages('stringr')
install.packages("GSA")
?RunHarmony.Seurat
??RunHarmony.Seurat
install.packages(c("knitr", "kableExtra", "webshot"))
install.packages("knitr")
install.packages("kableExtra")
.libPaths()
install.packages("openxlsx")
rm(list = ls())
setwd('/Users/tadeoye/Documents/Research codes/cell_cell_communication/scripts/')
library(qs)
library(dplyr)
library(SingleCellExperiment)
library(readxl)
library(scMerge)
library(Seurat)
astro_sce = qread("../data/raw/gazestani_pfc/organized_data/Human/brain/snRNA/Gazestani_0001/Astro_data_arranged_updatedId_final_batches.qs")
endo_sce <- qread("../data/raw/gazestani_pfc/organized_data/Human/brain/snRNA/Gazestani_0001/Endo_data_arranged_updatedId_final_batches.qs")
exc_sce <- qread("../data/raw/gazestani_pfc/organized_data/Human/brain/snRNA/Gazestani_0001/ExN_data_arranged_updatedId_final_batches.qs")
inh_sce <- qread("../data/raw/gazestani_pfc/organized_data/Human/brain/snRNA/Gazestani_0001/InN_data_arranged_updatedId_final_batches.qs")
mic_sce <- qread("../data/raw/gazestani_pfc/organized_data/Human/brain/snRNA/Gazestani_0001/MG_data_arranged_updatedId_final_batches.qs")
oli_sce <- qread("../data/raw/gazestani_pfc/organized_data/Human/brain/snRNA/Gazestani_0001/Oligo_data_arranged_updatedId_final_batches.qs")
opc_sce <- qread("../data/raw/gazestani_pfc/organized_data/Human/brain/snRNA/Gazestani_0001/OPC_data_arranged_updatedId_final_batches.qs")
astro_annot = qread("../data/raw/gazestani_pfc/annotations/Astro_Final_anno.qs")
endo_annot <- qread("../data/raw/gazestani_pfc/annotations/Endo_Final_anno.qs")
exc_annot <- qread("../data/raw/gazestani_pfc/annotations/ExN_Final_anno.qs")
inh_annot <- qread("../data/raw/gazestani_pfc/annotations/InN_Final_anno.qs")
mic_annot <- qread("../data/raw/gazestani_pfc/annotations/MG_Final_anno.qs")
opc_annot <- qread("../data/raw/gazestani_pfc/annotations/OPC_Final_anno.qs")
oli_annot <- qread("../data/raw/gazestani_pfc/annotations/Oligo_Final_anno.qs")
# Filter for entries in the NPH cohort
exc_annot <- exc_annot %>% filter(ds_batch == 'human_NPH')
endo_annot <- endo_annot %>% filter(ds_batch == 'human_NPH')
inh_annot <- inh_annot %>% filter(ds_batch == 'human_NPH')
mic_annot <- mic_annot %>% filter(ds_batch == 'human_NPH')
oli_annot <- oli_annot %>% filter(ds_batch == 'human_NPH')
opc_annot <- opc_annot %>% filter(ds_batch == 'human_NPH')
astro_annot <- astro_annot %>% filter(ds_batch == 'human_NPH')
# Function to transform sample column
transform_sample <- function(sample_column) {
sapply(sample_column, function(x) {
paste(unlist(strsplit(x, "_"))[3:length(unlist(strsplit(x, "_")))], collapse = "_")
})
}
# Set index to match anndata object
exc_annot$cell_barcode <- transform_sample(exc_annot$sample)
endo_annot$cell_barcode <- transform_sample(endo_annot$sample)
inh_annot$cell_barcode <- transform_sample(inh_annot$sample)
mic_annot$cell_barcode <- transform_sample(mic_annot$sample)
oli_annot$cell_barcode <- transform_sample(oli_annot$sample)
opc_annot$cell_barcode <- transform_sample(opc_annot$sample)
astro_annot$cell_barcode <- transform_sample(astro_annot$sample)
# Obtain qc'ed data
valid_cols_exc <- colnames(exc_sce)[!is.na(match(colnames(exc_sce), exc_annot$cell_barcode))]
exc_sce <- exc_sce[, valid_cols_exc]
valid_cols_inh <- colnames(inh_sce)[!is.na(match(colnames(inh_sce), inh_annot$cell_barcode))]
inh_sce <- inh_sce[, valid_cols_inh]
valid_cols_astro <- colnames(astro_sce)[!is.na(match(colnames(astro_sce), astro_annot$cell_barcode))]
astro_sce <- astro_sce[, valid_cols_astro]
valid_cols_mic <- colnames(mic_sce)[!is.na(match(colnames(mic_sce), mic_annot$cell_barcode))]
mic_sce <- mic_sce[, valid_cols_mic]
valid_cols_oli <- colnames(oli_sce)[!is.na(match(colnames(oli_sce), oli_annot$cell_barcode))]
oli_sce <- oli_sce[, valid_cols_oli]
valid_cols_opc <- colnames(opc_sce)[!is.na(match(colnames(opc_sce), opc_annot$cell_barcode))]
opc_sce <- opc_sce[, valid_cols_opc]
valid_cols_endo <- colnames(endo_sce)[!is.na(match(colnames(endo_sce), endo_annot$cell_barcode))]
endo_sce <- endo_sce[, valid_cols_endo]
# Merge annotations with corresponding SCE object
# Assuming colData of SCE corresponds to obs of anndata
colData(exc_sce)$cell_barcode <- colnames(exc_sce)
colData(exc_sce) <- DataFrame(as(colData(exc_sce), "data.frame") %>%
right_join(exc_annot, by = "cell_barcode"))
colnames(exc_sce) <- colData(exc_sce)$cell_barcode
colData(inh_sce)$cell_barcode <- colnames(inh_sce)
colData(inh_sce) <- DataFrame(as(colData(inh_sce), "data.frame") %>%
right_join(inh_annot, by = "cell_barcode"))
colnames(inh_sce) <- colData(inh_sce)$cell_barcode
colData(astro_sce)$cell_barcode <- colnames(astro_sce)
colData(astro_sce) <- DataFrame(as(colData(astro_sce), "data.frame") %>%
right_join(astro_annot, by = "cell_barcode"))
colnames(astro_sce) <- colData(astro_sce)$cell_barcode
colData(endo_sce)$cell_barcode <- colnames(endo_sce)
colData(endo_sce) <- DataFrame(as(colData(endo_sce), "data.frame") %>%
right_join(endo_annot, by = "cell_barcode"))
colnames(endo_sce) <- colData(endo_sce)$cell_barcode
colData(mic_sce)$cell_barcode <- colnames(mic_sce)
colData(mic_sce) <- DataFrame(as(colData(mic_sce), "data.frame") %>%
right_join(mic_annot, by = "cell_barcode"))
colnames(mic_sce) <- colData(mic_sce)$cell_barcode
colData(oli_sce)$cell_barcode <- colnames(oli_sce)
colData(oli_sce) <- DataFrame(as(colData(oli_sce), "data.frame") %>%
right_join(oli_annot, by = "cell_barcode"))
colnames(oli_sce) <- colData(oli_sce)$cell_barcode
colData(opc_sce)$cell_barcode <- colnames(opc_sce)
colData(opc_sce) <- DataFrame(as(colData(opc_sce), "data.frame") %>%
right_join(opc_annot, by = "cell_barcode"))
colnames(opc_sce) <- colData(opc_sce)$cell_barcode
# exc_seurat <- CreateSeuratObject(counts = assay(exc_sce, "counts"))
# exc_seurat@meta.data <- as.data.frame(colData(exc_sce))
#
# inh_seurat <- CreateSeuratObject(counts = assay(inh_sce, "counts"))
# inh_seurat@meta.data <- as.data.frame(colData(inh_sce))
#
# astro_seurat <- CreateSeuratObject(counts = assay(astro_sce, "counts"))
# astro_seurat@meta.data <- as.data.frame(colData(astro_sce))
#
# mic_seurat <- CreateSeuratObject(counts = assay(mic_sce, "counts"))
# mic_seurat@meta.data <- as.data.frame(colData(mic_sce))
#
# oli_seurat <- CreateSeuratObject(counts = assay(oli_sce, "counts"))
# oli_seurat@meta.data <- as.data.frame(colData(oli_sce))
#
# opc_seurat <- CreateSeuratObject(counts = assay(opc_sce, "counts"))
# opc_seurat@meta.data <- as.data.frame(colData(opc_sce))
#
# endo_seurat <- CreateSeuratObject(counts = assay(endo_sce, "counts"))
# endo_seurat@meta.data <- as.data.frame(colData(endo_sce))
# rm(exc_sce, inh_sce, astro_sce, mic_sce, oli_sce, opc_sce, endo_sce,
#   exc_annot, astro_annot, inh_annot, mic_annot, oli_annot, opc_annot,
#   endo_annot, valid_cols_exc, valid_cols_inh, valid_cols_astro,
#   valid_cols_mic, valid_cols_oli, valid_cols_opc, valid_cols_endo)
# merge list into one seurat object
# sce_list <- c(inh_seurat, astro_seurat, mic_seurat,
#               oli_seurat, opc_seurat, endo_seurat)
# sce_gazestani_pfc <- merge(exc_seurat, y=sce_list)
sce_gazestani_pfc <- rbind(exc_sce, inh_sce, astro_sce, mic_sce, oli_sce, opc_sce, endo_sce)
colnames(opc_sce)
sce_gazestani_pfc <- cbind(exc_sce, inh_sce, astro_sce, mic_sce, oli_sce, opc_sce, endo_sce)
